


/***************************************/

// top level opengl loop 
void flatImageDemo(int *argc, char** argv){
    
    int screenSize = 512; //defaults to 512
    if (argv[1]){
       screenSize = atoi(argv[1]);
    }

    printf("\n\nstarting up semraster in %i resolution.\n", screenSize);


    // you can find documentation at http://reality.sgi.com/mjk/spec3/spec3.html   
    glutInit(argc, argv);  

    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH);  
    glutInitWindowSize(screenSize, screenSize);  //window size

    // the window starts at the upper left corner of the screen  
    glutInitWindowPosition(0, 0);  
     
    window_id = glutCreateWindow("2D polygon demo"); //create an opengl window 

    glutDisplayFunc(&drawglscene_2d);//register display callback       

    // Even if there are no events, redraw our gl scene.  
    glutIdleFunc(&drawglscene_2d);

    glutReshapeFunc(&ReSizeGLScene);  //register window resize callback 
    glutKeyboardFunc(&keyPressed);    // Register key pressed callback 

    InitGL(screenSize, screenSize);   // Initialize window. 
    
    ///////////////////////////
    //test of BMP saving 
    //create_Image("generated1.bmp");  
    //create_Image2("generated2.bmp"); 
    
    glutMouseFunc (MouseButton);
    glutMotionFunc (MouseMotion);
  
    // Create our popup menu
    BuildPopupMenu ();
    glutAttachMenu (GLUT_RIGHT_BUTTON);
    
    /***********************/
    // 2d playground for framebuffer 

    // loadImage("textures/generated1.bmp", imageloaded_bfr);
    // loadImage("textures/generated3.bmp", imageloaded_bfr2);
    
    /*
    //test of new framebuffer commands
    RGBType* pt_rgb_bfr =  createBuffer24(imageloaded_bfr->sizeX, imageloaded_bfr->sizeY);    
    
    //copyBuffer24( imageloaded_bfr2 ,  pt_rgb_bfr ); //convert "Image" to "RGBType"

    //make a color for some lines 
    RGBType line_color;
    RGBType *pt_linecolor = &line_color;
    pt_linecolor->r = 255;
    pt_linecolor->g = 0;
    pt_linecolor->b = 0;

    // draw 4 lines - crisscross applesauce 
    //draw_line(pt_rgb_bfr, imageloaded_bfr->sizeX, 0  , 20  , 50  , 50  , pt_linecolor); 
    draw_line(pt_rgb_bfr, imageloaded_bfr->sizeX, 0  , 0   , 511 , 511 , pt_linecolor); 
    draw_line(pt_rgb_bfr, imageloaded_bfr->sizeX, 511, 0   , 0   , 511 , pt_linecolor); 
    //draw_line(pt_rgb_bfr, imageloaded_bfr->sizeX, 0  , 511 , 511 , 0   , pt_linecolor);

    // const char *filename = "rgb_buffer.bmp";
    // saveBMP_24bit (pt_rgb_bfr, filename , image_x, image_y);
    // free(pt_image_bfr);

    //overwrite loaded buffer with lines
    copyBuffer24( pt_rgb_bfr, imageloaded_bfr ); //convert "RGBType" to "Image"
   
    */


    //imageloaded_bfr2
    
    /***********************/

    glutMainLoop();// Start Event Processing Engine   
   
}